{"version":3,"sources":["components/Form.jsx","components/Header.jsx","components/Footer.jsx","components/App.jsx","index.js"],"names":["Form","props","onSubmit","event","preventDefault","onFormSubmit","type","placeholder","required","value","userInput","onChange","onFormChange","target","Header","Footer","year","Date","getFullYear","Typography","Link","href","className","App","useState","outcome","setOutcome","prediction","setPrediction","getLatestOutcomes","fetch","then","response","ok","json","data","useEffect","classes","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundImage","marginTop","gridList","transform","title","color","palette","primary","light","titleBar","background","useStyles","inputValue","method","body","JSON","stringify","headers","message","console","log","GridList","cols","cellHeight","map","outcomeItem","index","GridListTile","src","imgUrl","alt","result","GridListTileBar","subtitle","titlePosition","actionIcon","IconButton","aria-label","onClick","id","id_num","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22540166.chunk.js","sourcesContent":["import React from 'react';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\n\nfunction Form(props){\n\n    function handleChange(event){\n        props.onFormChange(event.target.value)\n    }\n\n    function handleSubmit(event){\n        event.preventDefault();\n        props.onFormSubmit();\n\n    }\n\n    return <form onSubmit={handleSubmit}>\n            <input type=\"text-area\" placeholder=\"Enter the article name here\" required value={props.userInput}onChange={handleChange}></input>\n            <button type=\"submit\">\n                <RadioButtonCheckedIcon/>\n            </button>\n    </form>\n}\n\nexport default Form;","import React from \"react\";\nimport PanToolIcon from '@material-ui/icons/PanTool';\n\nfunction Header() {\n  return (\n    <header>\n      <h1>\n        <PanToolIcon /> \n         ClickBait Predictor App\n      </h1>\n    </header>\n  );\n}\n\nexport default Header;","  import React from \"react\";\n  import LinkedInIcon from '@material-ui/icons/LinkedIn';\n  import GitHubIcon from '@material-ui/icons/GitHub';\n  import FacebookIcon from '@material-ui/icons/Facebook';\n  import Typography from '@material-ui/core/Typography';\n  import Link from '@material-ui/core/Link';\n\nfunction Footer() {\n  const year = new Date().getFullYear();\n  return (\n    <footer>\n      <p>Copyright â“’ Bart Venter {year}</p>\n      <Typography >\n      <Link href={\"https://www.linkedin.com/in/bart-venter-ca-sa-606bb0141/\"}>\n      <LinkedInIcon className=\"footerbutton\"/>\n      </Link>\n      <Link href={\"https://github.com/bartventer?tab=repositories\"}>\n      <GitHubIcon className=\"footerbutton\"/>\n      </Link>\n      <Link href={\"https://www.facebook.com/bart.venter.12\"}>\n      <FacebookIcon className=\"footerbutton\"/>\n      </Link>\n      </Typography>\n    </footer>\n  );\n}\n\nexport default Footer;","import React, {useState, useEffect} from 'react';\nimport Form from './Form';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport Header from './Header';\nimport Footer from './Footer';\n\nfunction App(){\n\n    const [outcome, setOutcome]=useState([]);\n\n    const [prediction, setPrediction]=useState('');\n\n    useEffect(() => {\n        fetch('/api').then(response => {\n            if(response.ok){\n                return response.json()\n            }\n        }).then(data => setOutcome(data))\n    },[])\n\n    function handleFormChange(inputValue){\n        setPrediction(inputValue)\n    }\n\n    function handleFormSubmit(){\n        fetch('/api/predict', {\n            method: 'POST',\n            body: JSON.stringify({\n                title:prediction\n            }),\n            headers: {\n                \"Content-Type\": \"application/json; charset=UTF-8\"\n                }\n        }).then(response => response.json())\n        .then(message => {\n            console.log(message)\n            setPrediction('')\n            getLatestOutcomes()\n            })\n        }\n\n    function getLatestOutcomes(){\n        fetch('/api').then(response => {\n            if(response.ok){\n                return response.json()\n            }\n        }).then(data => \n           setOutcome(data))\n    }\n\n    function deleteOutcome(id){\n        fetch('api/delete', {\n            method: 'POST',\n            body: JSON.stringify({\n                id_num:id\n            }),\n            headers: {\n                \"Content-Type\": \"application/json; charset=UTF-8\"\n                }\n        }).then(response => response.json())\n        .then(message => {\n            console.log(message)\n            getLatestOutcomes()\n            })\n        }\n\n\n    const useStyles = makeStyles((theme) => ({\n        root: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          justifyContent: 'space-around',\n          overflow: 'hidden',\n          backgroundImage: 'url(\"https://www.transparenttextures.com/patterns/asfalt-dark.png\")',\n          marginTop: \"70px\"\n        },\n        gridList: {\n          flexWrap: 'nowrap',\n          transform: 'translateZ(0)',\n        \n        },\n        title: {\n          color: theme.palette.primary.light,\n        },\n        titleBar: {\n          background:\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n        }\n      }));\n\n      const classes = useStyles();\n\n    return <div>\n            <Header/>\n            <h3 className=\"guidance\">There's too much clickbait going around. Simply enter the name of the article and the site will predict whether the piece is clickbait or not. We'll generate an image with your result.</h3>\n            <Form userInput={prediction} onFormChange={handleFormChange} onFormSubmit={handleFormSubmit}/>\n            \n            <div className={classes.root}>\n            <GridList className={classes.gridList} cols={2.5} cellHeight={250}>\n            {outcome.map((outcomeItem, index) => (\n            <GridListTile key={index}>\n            <img src={outcomeItem.imgUrl} alt={outcomeItem.result} />\n            <GridListTileBar\n              title={outcomeItem.result}\n              subtitle={outcomeItem.prediction}\n              titlePosition={'bottom'}\n              classes={{\n                root: classes.titleBar,\n                title: classes.title,\n              }}\n              actionIcon={\n                <IconButton aria-label={`star ${outcomeItem.prediction}`} onClick={()=> deleteOutcome(index)}>\n                  <DeleteForeverIcon className={classes.title} />\n                </IconButton>\n              }\n            />\n            </GridListTile>\n        ))}\n      </GridList>\n    </div>\n\n    <Footer/>\n\n    </div>\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}